{"ast":null,"code":"import config from '../../src/config/config';\nimport { authHeader } from '../helpers';\nexport const userService = {\n  login,\n  logout,\n  getRefreshToken\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(config.apiUrl + '/auth/get-token', requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getRefreshToken() {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      \"access-token\": token\n    }\n  };\n  return fetch(`${config.apiUrl}/auth/get-refresh-token`, requestOptions).then(handleResponse).then(res => {\n    localStorage.setItem('user', JSON.stringify(user));\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/home/vend/Projects/ticketing/fe/old/ticketing_web/src/services/user.service.js"],"names":["config","authHeader","userService","login","logout","getRefreshToken","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","localStorage","setItem","removeItem","token","res","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,CAACd,MAAM,CAACe,MAAP,GAAgB,iBAAjB,EAAoCP,cAApC,CAAL,CACFQ,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACC,SAAL,CAAeK,IAAf,CAA7B;AAEA,WAAOA,IAAP;AACH,GAPE,CAAP;AAQH;;AAED,SAASd,MAAT,GAAkB;AACd;AACAe,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAED,SAAShB,eAAT,GAA2B;AACvB,QAAMG,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAE;AAAC,sBAAiBW;AAAlB;AAHa,GAAvB;AAMA,SAAOR,KAAK,CAAE,GAAEd,MAAM,CAACe,MAAO,yBAAlB,EAA4CP,cAA5C,CAAL,CACFQ,IADE,CACGC,cADH,EAEHD,IAFG,CAEEO,GAAG,IAAI;AACRJ,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACC,SAAL,CAAeK,IAAf,CAA7B;AACH,GAJE,CAAP;AAKH;;AAED,SAASD,cAAT,CAAwBO,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBT,IAAhB,CAAqBS,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIb,IAAI,CAACe,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAzB,QAAAA,MAAM;AACT;;AAED,YAAM0B,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BP,QAAQ,CAACQ,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOJ,IAAP;AACH,GAbM,CAAP;AAcH","sourcesContent":["import config from '../../src/config/config';\nimport { authHeader } from '../helpers';\n\nexport const userService = {\n    login,\n    logout,\n    getRefreshToken\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    return fetch(config.apiUrl + '/auth/get-token', requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('user', JSON.stringify(user));\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction getRefreshToken() {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: {\"access-token\" : token}\n    };\n\n    return fetch(`${config.apiUrl}/auth/get-refresh-token`, requestOptions)\n        .then(handleResponse).\n        then(res => {\n            localStorage.setItem('user', JSON.stringify(user));\n        });\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();                \n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}