{"ast":null,"code":"import { userConstants } from '../constants';\nimport { userService } from '../services';\nimport { alertActions } from './';\nimport { history } from '../helpers';\nexport const userActions = {\n  login,\n  logout\n};\n\nfunction login(username, password) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    userService.login(username, password).then(user => {\n      dispatch(success(user));\n      history.push('/');\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  userService.logout();\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction getRefreshToken(c) {\n  return dispatch => {\n    dispatch(request(accessToken));\n    userService.getRefreshToken(accessToken).then(user => {\n      dispatch(success(accessToken));\n    }, error => {\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request(accessToken) {\n    return {\n      type: userConstants.GET_REFRESH_TOKEN_REQUEST,\n      user\n    };\n  }\n\n  function success(accessToken) {\n    return {\n      type: userConstants.GET_REFRESH_TOKEN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GET_REFRESH_TOKEN_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/home/vend/Projects/ticketing/fe/old/ticketing_web/src/actions/user.actions.js"],"names":["userConstants","userService","alertActions","history","userActions","login","logout","username","password","dispatch","request","then","user","success","push","error","failure","toString","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","getRefreshToken","c","accessToken","GET_REFRESH_TOKEN_REQUEST","GET_REFRESH_TOKEN_SUCCESS","GET_REFRESH_TOKEN_FAILURE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA;AAFuB,CAApB;;AAKP,SAASD,KAAT,CAAeE,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAAC;AAAEH,MAAAA;AAAF,KAAD,CAAR,CAAR;AAEAN,IAAAA,WAAW,CAACI,KAAZ,CAAkBE,QAAlB,EAA4BC,QAA5B,EACKG,IADL,CAEQC,IAAI,IAAI;AACJH,MAAAA,QAAQ,CAACI,OAAO,CAACD,IAAD,CAAR,CAAR;AACAT,MAAAA,OAAO,CAACW,IAAR,CAAa,GAAb;AACH,KALT,EAMQC,KAAK,IAAI;AACLN,MAAAA,QAAQ,CAACO,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAR,MAAAA,QAAQ,CAACP,YAAY,CAACa,KAAb,CAAmBA,KAAK,CAACE,QAAN,EAAnB,CAAD,CAAR;AACH,KATT;AAWH,GAdD;;AAgBA,WAASP,OAAT,CAAiBE,IAAjB,EAAuB;AAAE,WAAO;AAAEM,MAAAA,IAAI,EAAElB,aAAa,CAACmB,aAAtB;AAAqCP,MAAAA;AAArC,KAAP;AAAoD;;AAC7E,WAASC,OAAT,CAAiBD,IAAjB,EAAuB;AAAE,WAAO;AAAEM,MAAAA,IAAI,EAAElB,aAAa,CAACoB,aAAtB;AAAqCR,MAAAA;AAArC,KAAP;AAAoD;;AAC7E,WAASI,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAElB,aAAa,CAACqB,aAAtB;AAAqCN,MAAAA;AAArC,KAAP;AAAqD;AAClF;;AAED,SAAST,MAAT,GAAkB;AACdL,EAAAA,WAAW,CAACK,MAAZ;AACA,SAAO;AAAEY,IAAAA,IAAI,EAAElB,aAAa,CAACsB;AAAtB,GAAP;AACH;;AAGD,SAASC,eAAT,CAAyBC,CAAzB,EAA4B;AACxB,SAAOf,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAACe,WAAD,CAAR,CAAR;AAEAxB,IAAAA,WAAW,CAACsB,eAAZ,CAA4BE,WAA5B,EACKd,IADL,CAEQC,IAAI,IAAI;AACJH,MAAAA,QAAQ,CAACI,OAAO,CAACY,WAAD,CAAR,CAAR;AACH,KAJT,EAKQV,KAAK,IAAI;AACLN,MAAAA,QAAQ,CAACO,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACH,KAPT;AASH,GAZD;;AAcA,WAASP,OAAT,CAAiBe,WAAjB,EAA8B;AAAE,WAAO;AAAEP,MAAAA,IAAI,EAAElB,aAAa,CAAC0B,yBAAtB;AAAiDd,MAAAA;AAAjD,KAAP;AAAgE;;AAChG,WAASC,OAAT,CAAiBY,WAAjB,EAA8B;AAAE,WAAO;AAAEP,MAAAA,IAAI,EAAElB,aAAa,CAAC2B,yBAAtB;AAAiDf,MAAAA;AAAjD,KAAP;AAAgE;;AAChG,WAASI,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAElB,aAAa,CAAC4B,yBAAtB;AAAiDb,MAAAA;AAAjD,KAAP;AAAiE;AAC9F","sourcesContent":["import { userConstants } from '../constants';\nimport { userService } from '../services';\nimport { alertActions } from './';\nimport { history } from '../helpers';\n\nexport const userActions = {\n    login,\n    logout\n};\n\nfunction login(username, password) {\n    return dispatch => {\n        dispatch(request({ username }));\n\n        userService.login(username, password)\n            .then(\n                user => { \n                    dispatch(success(user));\n                    history.push('/');\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n    userService.logout();\n    return { type: userConstants.LOGOUT };\n}\n\n\nfunction getRefreshToken(c) {\n    return dispatch => {\n        dispatch(request(accessToken));\n\n        userService.getRefreshToken(accessToken)\n            .then(\n                user => { \n                    dispatch(success(accessToken));\n                },\n                error => {\n                    dispatch(failure(error.toString()));                    \n                }\n            );\n    };\n\n    function request(accessToken) { return { type: userConstants.GET_REFRESH_TOKEN_REQUEST, user } }\n    function success(accessToken) { return { type: userConstants.GET_REFRESH_TOKEN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.GET_REFRESH_TOKEN_FAILURE, error } }\n}"]},"metadata":{},"sourceType":"module"}