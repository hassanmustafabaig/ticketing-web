{"ast":null,"code":"import config from '../../src/config/config';\nimport { authHeader } from '../helpers';\nexport const userService = {\n  login,\n  logout\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(config.apiUrl + '/auth/get-token', requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${config.apiUrl}/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${config.apiUrl}/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/home/vend/Projects/ticketing/fe/old/ticketing_web/src/services/user.service.js"],"names":["config","authHeader","userService","login","logout","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","localStorage","setItem","removeItem","getAll","getById","id","register","update","_delete","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import config from '../../src/config/config';\nimport { authHeader } from '../helpers';\n\nexport const userService = {\n    login,\n    logout\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    return fetch(config.apiUrl + '/auth/get-token', requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('user', JSON.stringify(user));\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction getAll() {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n\n    return fetch(`${config.apiUrl}/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n    const requestOptions = {\n        method: 'PUT',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n\n    return fetch(`${config.apiUrl}/users/${user.id}`, requestOptions).then(handleResponse);;\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n    const requestOptions = {\n        method: 'DELETE',\n        headers: authHeader()\n    };\n\n    return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();                \n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}